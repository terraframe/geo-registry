package net.geoprism.registry.action.geoobject;

@com.runwaysdk.business.ClassSignature(hash = 1248961738)
/**
 * This class is generated automatically.
 * DO NOT MAKE CHANGES TO IT - THEY WILL BE OVERWRITTEN
 * Custom business logic should be added to GeoObjectAction.java
 *
 * @author Autogenerated by RunwaySDK
 */
public abstract class GeoObjectActionBase extends net.geoprism.registry.action.AbstractAction
{
  public final static String CLASS = "net.geoprism.registry.action.geoobject.GeoObjectAction";
  public static java.lang.String GEOOBJECTCODE = "geoObjectCode";
  public static java.lang.String GEOOBJECTTYPECODE = "geoObjectTypeCode";
  public static java.lang.String ORGANIZATIONCODE = "organizationCode";
  private static final long serialVersionUID = 1248961738;
  
  public GeoObjectActionBase()
  {
    super();
  }
  
  public String getGeoObjectCode()
  {
    return getValue(GEOOBJECTCODE);
  }
  
  public void validateGeoObjectCode()
  {
    this.validateAttribute(GEOOBJECTCODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeoObjectCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.action.geoobject.GeoObjectAction.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOOBJECTCODE);
  }
  
  public void setGeoObjectCode(String value)
  {
    if(value == null)
    {
      setValue(GEOOBJECTCODE, "");
    }
    else
    {
      setValue(GEOOBJECTCODE, value);
    }
  }
  
  public String getGeoObjectTypeCode()
  {
    return getValue(GEOOBJECTTYPECODE);
  }
  
  public void validateGeoObjectTypeCode()
  {
    this.validateAttribute(GEOOBJECTTYPECODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getGeoObjectTypeCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.action.geoobject.GeoObjectAction.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(GEOOBJECTTYPECODE);
  }
  
  public void setGeoObjectTypeCode(String value)
  {
    if(value == null)
    {
      setValue(GEOOBJECTTYPECODE, "");
    }
    else
    {
      setValue(GEOOBJECTTYPECODE, value);
    }
  }
  
  public String getOrganizationCode()
  {
    return getValue(ORGANIZATIONCODE);
  }
  
  public void validateOrganizationCode()
  {
    this.validateAttribute(ORGANIZATIONCODE);
  }
  
  public static com.runwaysdk.dataaccess.MdAttributeTextDAOIF getOrganizationCodeMd()
  {
    com.runwaysdk.dataaccess.MdClassDAOIF mdClassIF = com.runwaysdk.dataaccess.metadata.MdClassDAO.getMdClassDAO(net.geoprism.registry.action.geoobject.GeoObjectAction.CLASS);
    return (com.runwaysdk.dataaccess.MdAttributeTextDAOIF)mdClassIF.definesAttribute(ORGANIZATIONCODE);
  }
  
  public void setOrganizationCode(String value)
  {
    if(value == null)
    {
      setValue(ORGANIZATIONCODE, "");
    }
    else
    {
      setValue(ORGANIZATIONCODE, value);
    }
  }
  
  protected String getDeclaredType()
  {
    return CLASS;
  }
  
  public static GeoObjectAction get(String oid)
  {
    return (GeoObjectAction) com.runwaysdk.business.Business.get(oid);
  }
  
  public static GeoObjectAction getByKey(String key)
  {
    return (GeoObjectAction) com.runwaysdk.business.Business.get(CLASS, key);
  }
  
  public static GeoObjectAction lock(java.lang.String oid)
  {
    GeoObjectAction _instance = GeoObjectAction.get(oid);
    _instance.lock();
    
    return _instance;
  }
  
  public static GeoObjectAction unlock(java.lang.String oid)
  {
    GeoObjectAction _instance = GeoObjectAction.get(oid);
    _instance.unlock();
    
    return _instance;
  }
  
  public String toString()
  {
    if (this.isNew())
    {
      return "New: "+ this.getClassDisplayLabel();
    }
    else
    {
      return super.toString();
    }
  }
}
